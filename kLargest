import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class kLargest {
	final static int T = 15;

	public static int longestStreak(int[] arr) {
		Set<Integer> set = new HashSet<>();

		for (int e : arr) {
			set.add(e);
		}
		int max = 0;
		int x;
		for (int e : set) {
			if (set.contains(e - 1)) {
				continue;
			}
			x = e + 1;
			while (set.contains(x)) {
				x++;
			}
			if (max < x - e) {
				max = x - e;
			}

		}
		return max;
	}

	void select(int[] arr, int k) {
		select(arr, 0, arr.length, k); // result in arr[len-k]..arr[len-1]

	}

	int select(int arr[], int p, int n, int k) {
		int q = -1, left = -1, right = -1;
		if (n < T) {
			insertionSort(arr, p, p + n - 1);
		} else {
			q = randomisedPartition(arr, p, p + n - 1);

		}
		left = q - p;
		right = n - left - 1;
		if (right >= k) {
			return select(arr, q + 1, right, k);

		} else if ((right + 1) == k) {
			return q;
		} else {
			return select(arr, p, left, k - right - 1);
		}

	}

	private int randomisedPartition(int[] arr, int p, int r) {
		int i = (int) (Math.random() * ((r - p) + 1)) + p;

		int temp = arr[i];
		arr[i] = arr[r];
		arr[r] = temp;

		return partition(arr, p, r);

	}

	private int partition(int[] arr, int p, int r) {
		int x = arr[r]; // pivot element
		int i = p - 1;

		for (int j = p; j < r; j++) {
			if (arr[j] <= x) {
				i++;
				int temp = arr[j];
				arr[j] = arr[i];
				arr[i] = temp;
			}

		}
		// Bring pivot back to the middle

		int temp = arr[i + 1];
		arr[i + 1] = arr[r];
		arr[r] = temp;

		return i + 1;

	}

	public static void insertionSort(int[] arr, int p, int r) {
		for (int i = p + 1; i <= r; i++) {
			int tmp = arr[i];
			int j = i - 1;
			while (j >= p && tmp < arr[j]) {
				arr[j + 1] = arr[j];
				j = j - 1;
			}
			arr[j + 1] = tmp;
		}

	}

	public static void main(String args[]) {

		int temp[] = { 1, 7, 9, 4, 1, 7, 4, 8, 7, 1 };
		int maxstr = longestStreak(temp);

		System.out.println(maxstr);
		kLargest l = new kLargest();
		l.select(temp, 4);
	}
}
